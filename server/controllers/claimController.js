// server/controllers/claimController.js
import Claim from "../models/Claim.js";
import Item from "../models/Item.js";
import Notification from "../models/Notification.js";

/**
* Create a claim for an item
* Expects: { message } in body, :itemId in params
*/
export const createClaim = async (req, res) => {
Â  try {
Â  Â  const { message } = req.body;
Â  Â  const { itemId } = req.params;
Â  Â  if (!itemId) return res.status(400).json({ message: "itemId required" });

Â  Â  const item = await Item.findById(itemId);
Â  Â  if (!item) return res.status(404).json({ message: "Item not found" });

Â  Â  if (item.postedBy.toString() === req.user.id.toString()) {
Â  Â  Â  return res.status(400).json({ message: "You cannot claim your own item." });
Â  Â  }

Â  Â  const claim = await Claim.create({
Â  Â  Â  itemId,
Â  Â  Â  claimantId: req.user.id,
Â  Â  Â  message
Â  Â  });

Â  Â  // create notification for item owner
Â  Â  const notif = await Notification.create({
Â  Â  Â  userId: item.postedBy,
Â  Â  Â  type: "claim_new",
Â  Â  Â  payload: {
Â  Â  Â  Â  claimId: claim._id,
Â  Â  Â  Â  itemId: item._id,
        // --- Improved Message ---
Â  Â  Â  Â  message: `Someone has claimed your item: "${item.title}"` 
Â  Â  Â  }
Â  Â  });

Â  Â  // --- UPDATED SOCKET LOGIC ---
Â  Â  // emit via socket if possible
Â  Â  const io = req.app.get("io");
Â  Â  const onlineUsers = req.app.get("onlineUsers"); // 1. Get the map

Â  Â  if (io && onlineUsers) {
      // 2. Find the owner's specific socket ID
Â  Â  Â  const ownerSocketId = onlineUsers.get(String(item.postedBy));
Â  Â  Â Â 
Â  Â  Â  if (ownerSocketId) {
        // 3. Send the notification ONLY to that user
Â  Â  Â  Â  io.to(ownerSocketId).emit("notification", notif);
Â  Â  Â  Â  console.log(`ðŸ“¨ Sent real-time claim notification to user ${item.postedBy}`);
Â  Â  Â  } else {
Â  Â  Â  Â  console.log(`User ${item.postedBy} is not online for real-time notification.`);
Â  Â  Â  }
Â  Â  }
    // --- END OF UPDATE ---

Â  Â  res.status(201).json(claim);
Â  } catch (err) {
Â  Â  console.error("createClaim error:", err);
Â  Â  res.status(500).json({ message: "Server error" });
Â  }
};

/**
Â * Get claims by current user
Â */
export const getMyClaims = async (req, res) => {
Â  try {
Â  Â  const claims = await Claim.find({ claimantId: req.user.id })
Â  Â  Â  .populate("itemId", "title category location")
Â  Â  Â  .sort("-dateClaimed");
Â  Â  res.json(claims);
Â  } catch (err) {
Â  Â  console.error("getMyClaims error:", err);
Â  Â  res.status(500).json({ message: "Server error" });
Â  }
};

/**
Â * Admin: get all claims
Â */
export const getAllClaims = async (req, res) => {
Â  try {
Â  Â  // ensure admin check is done in route middleware
Â   Â  const claims = await Claim.find()
Â  Â  Â  .populate("itemId", "title postedBy")
Â  Â  Â  .populate("claimantId", "name email")
Â  Â  Â  .sort("-dateClaimed");
Â  Â  res.json(claims);
Â  } catch (err) {
Â  Â  console.error("getAllClaims error:", err);
Â  Â  res.status(500).json({ message: "Server error" });
Â  }
};

/**
Â * Admin: update claim status (approve / reject)
Â * body: { status: "verified" | "rejected" }
Â */
export const updateClaimStatus = async (req, res) => {
Â  try {
Â  Â  const claim = await Claim.findById(req.params.id);
Â  Â  if (!claim) return res.status(404).json({ message: "Claim not found" });

Â  Â  const { status } = req.body;
Â  Â  if (!["pending", "verified", "rejected"].includes(status)) {
Â  Â  Â  return res.status(400).json({ message: "Invalid status" });
Â  Â  }

Â  Â  claim.status = status;
Â  Â  await claim.save();

Â  Â  // notify claimant and item owner
Â  Â  const item = await Item.findById(claim.itemId);
Â  Â  const claimantNotif = await Notification.create({
Â  Â  Â  userId: claim.claimantId,
Â  Â  Â  type: "claim_status",
Â  Â  Â  payload: { claimId: claim._id, status, itemId: item._id }
 Â  });

Â  Â  const ownerNotif = await Notification.create({
Â  Â  Â  userId: item.postedBy,
Â  Â  Â  type: "claim_update",
Â  Â  Â  payload: { claimId: claim._id, status, itemId: item._id }
Â  Â  });

    // --- UPDATED SOCKET LOGIC ---
    // This logic should also be targeted, not a global broadcast
Â  Â  const io = req.app.get("io");
    const onlineUsers = req.app.get("onlineUsers");

Â  Â  if (io && onlineUsers) {
      // Notify the claimant
Â  Â  Â  const claimantSocketId = onlineUsers.get(String(claim.claimantId));
      if (claimantSocketId) {
        io.to(claimantSocketId).emit("notification", claimantNotif);
      }
      
      // Notify the owner
      const ownerSocketId = onlineUsers.get(String(item.postedBy));
      if (ownerSocketId) {
        io.to(ownerSocketId).emit("notification", ownerNotif);
      }
    }
    // --- END OF UPDATE ---

Â  Â  res.json({ message: "Claim updated", claim });
Â  } catch (err) {
Â  Â  console.error("updateClaimStatus error:", err);
Â  Â  res.status(500).json({ message: "Server error" });
Â  }
};

export const getClaimsForItem = async (req, res) => {
  try {
    const { itemId } = req.params;
    const item = await Item.findById(itemId);

    if (!item) {
      return res.status(404).json({ message: "Item not found" });
    }

    // Security check: Only owner or admin can see claims
    if (String(item.postedBy) !== String(req.user.id) && req.user.role !== 'admin') {
Â  Â  Â  return res.status(403).json({ message: "Not authorized to view claims" });
Â  D }

    const claims = await Claim.find({ itemId: itemId })
      .populate('claimantId', 'name email') // <-- Gets the claimant's info
      .sort({ dateClaimed: -1 });
    
    res.json(claims);

  } catch (err) {
    console.error("getClaimsForItem error:", err);
    res.status(500).json({ message: "Server error" });
  }
};